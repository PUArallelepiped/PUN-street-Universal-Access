openapi: 3.0.3
info:
  title: PUN street Universal Access - OpenAPI 3.0
  description: pua
  version: v1
servers:
- url: http://localhost:5000/api/v1
paths:
  /store/{storeID}:
    get:
      tags:
      - customer
      - store
      summary: return a store by ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: A Store object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInfoWithCategory'
        "500":
          description: Unexpected error
  /stores:
    post:
      tags:
      - customer
      - store
      summary: get all store
      requestBody:
        description: search info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchInfo'
      responses:
        "200":
          description: return store array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneStoreListInfoArray'
        "500":
          description: Unexpected error
  /store/{storeID}/get-statistics/{year}:
    get:
      tags:
      - seller
      - store
      - statistics
      summary: get store statistics each month by year
      parameters:
      - name: storeID
        in: path
        description: The ID of the store.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: year
        in: path
        description: The year store want to know .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "2020"
              x-content-type: application/json
      responses:
        "200":
          description: return store statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreStatistic'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/get-selling/{year}/{month}:
    get:
      tags:
      - seller
      - store
      - statistics
      summary: get best selling product
      parameters:
      - name: storeID
        in: path
        description: The ID of the store.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: year
        in: path
        description: The year of products quantity.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "2020"
              x-content-type: application/json
      - name: month
        in: path
        description: The month of products quantity.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return best selling product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductStatisticArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/carts:
    get:
      tags:
      - customer
      - cart
      summary: get carts by userID and (cartID form userID)
      parameters:
      - name: userID
        in: path
        description: The ID of the user.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return carts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartOrderInfo'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/store/{storeID}/carts:
    get:
      tags:
      - customer
      - cart
      summary: get carts by userID and cartID and StoreID
      parameters:
      - name: userID
        in: path
        description: The ID of the user.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return carts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreOrderInfo'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/add-product:
    post:
      tags:
      - seller
      - store
      - product
      summary: check product exist then (add) or (just change status) or (change status
        to deactive and add product) then add event discount array then delete all
        label then add new label array
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfoWithLabelAndDiscount'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID]/store/{storeID}/rate:
    post:
      tags:
      - customer
      - store
      summary: rate a store
      parameters:
      - name: userID
        in: path
        description: The ID of the user to rate.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart to rate.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store to rate.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: rate info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateInfo'
      responses:
        "200":
          description: rate success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seller/{userID}/create-store:
    post:
      tags:
      - seller
      - store
      summary: create new store
      parameters:
      - name: userID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: store info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInfo'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/get-categories:
    get:
      tags:
      - seller
      - store
      - category
      summary: get all categories of store
      parameters:
      - name: storeID
        in: path
        description: The ID of the store
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return category array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/add-category/{categoryID}:
    post:
      tags:
      - seller
      - store
      - category
      summary: add a category to store
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to add
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: categoryID
        in: path
        description: The ID of the category to add
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/remove-category/{categoryID}:
    delete:
      tags:
      - seller
      - store
      - category
      summary: remove a category from store
      parameters:
      - name: categoryID
        in: path
        description: The ID of the category to remove
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store to remove
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /categories:
    get:
      tags:
      - seller
      - category
      summary: get all category
      responses:
        "200":
          description: return category array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryArray'
        "500":
          description: Unexpected error
  /seller/update-order-status/customer/{userID}/cart/{cartID}/store/{storeID}:
    put:
      tags:
      - seller
      - order
      summary: update order status to next status
      parameters:
      - name: userID
        in: path
        description: The ID of the user to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return a Store Order info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreOrderStatusInfo'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /product/{productID}/recommend:
    get:
      tags:
      - customer
      - product
      summary: get 'who bought this also bought'
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return product array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendInfoArray'
        "500":
          description: Unexpected error
  /product/{productID}:
    get:
      tags:
      - customer
      - product
      - seller
      summary: return a product by ID
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: A product object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfoWithLabelAndDiscount'
        "500":
          description: Unexpected error
  /product/{productID}/delete-product:
    put:
      tags:
      - product
      - seller
      summary: change status to deactive
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /product/{productID}/event-discounts:
    get:
      tags:
      - customer
      - discount
      - product
      summary: get event discounts by product ID status =1
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return discount array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDiscountArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/products:
    get:
      tags:
      - customer
      - store
      - product
      summary: get all products by store ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return product array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfoWithLabelAndDiscountArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart:
    post:
      tags:
      - customer
      - cart
      summary: add product to cart / update product quantity and check order exits
        by store if not exits add a new order status = 0
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: add a new cart.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInfo'
        required: true
      responses:
        "200":
          description: A cart object.
        "418":
          description: The inventory is not enough for the supply.
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/delete/product/{productID}:
    delete:
      tags:
      - customer
      - cart
      summary: remove product from cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: delete success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/store/{storeID}/cart/{cartID}/cancel:
    put:
      tags:
      - customer
      - order
      summary: cancel order
      parameters:
      - name: userID
        in: path
        description: The ID of the user.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: cancel success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /user/get-info/{userID}:
    get:
      tags:
      - user
      summary: get user info by ID
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /login:
    post:
      tags:
      - user
      summary: login
      requestBody:
        description: login info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
      responses:
        "200":
          description: login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        "400":
          description: bad request
        "403":
          description: banned
        "500":
          description: Unexpected error
  /validate:
    get:
      tags:
      - user
      summary: validate jwt token
      responses:
        "200":
          description: validate success
        "401":
          description: Unauthorized
        "500":
          description: Unexpected error
  /register:
    post:
      tags:
      - user
      summary: register
      requestBody:
        description: register info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInfo'
      responses:
        "200":
          description: register success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /check-email:
    post:
      tags:
      - user
      summary: check email exist
      requestBody:
        description: email info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailInfo'
      responses:
        "200":
          description: exist or not
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /userID:
    get:
      tags:
      - user
      summary: get user ID by cookie
      responses:
        "200":
          description: return user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdInfo'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seller/store/{storeID}/orders:
    get:
      tags:
      - seller
      - store
      - order
      summary: get all orders by storeID status not 0/6
      parameters:
      - name: storeID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreOrderStatusInfoArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/shipping-discount:
    get:
      tags:
      - customer
      - discount
      summary: get shipping discount when status = 1 by store ID
      parameters:
      - name: storeID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDiscount'
        "400":
          description: bad request
        "500":
          description: Unexpected error
    post:
      tags:
      - seller
      - discount
      summary: check exist by storeID then create a shipping discount if exist change
        status = 0 then create a new
      parameters:
      - name: storeID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingDiscount'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDiscount'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seasoning-discount:
    post:
      tags:
      - seller
      - discount
      summary: create a seasoning discount
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeasoningDiscount'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /product/{productID}/event-discount:
    post:
      tags:
      - seller
      - discount
      summary: create a event discount
      parameters:
      - name: productID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDiscount'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seasoning-discounts:
    get:
      tags:
      - customer
      - discount
      summary: get all seasoning discounts status = 1
      responses:
        "200":
          description: return seasoning discount array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasoningDiscountArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /discount/{discountID}/delete-discount:
    put:
      tags:
      - seller
      - discount
      summary: update discount status to 0
      parameters:
      - name: discountID
        in: path
        description: The ID of the discount to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: update success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/checkout:
    post:
      tags:
      - customer
      - cart
      - order
      summary: checkout cart (optional-> email to customer) change order status/total-price
        and change user_data current_cart_id +1
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/store/{storeID}/add-discount/{discountID}:
    post:
      tags:
      - customer
      - cart
      - discount
      summary: add discount to cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: discountID
        in: path
        description: The ID of the discount .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: add success
        "500":
          description: Unexpected error
  /customer/{userID}/order-status:
    get:
      tags:
      - customer
      - order
      summary: get all orders when status not 0/1/6
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOrderInfoArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/get-history:
    get:
      tags:
      - customer
      - order
      summary: get all orders by user ID
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/ban-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: ban a user by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return UserDataShort
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataShort'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/unban-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: unban a user by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return UserDataShort
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataShort'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/edit-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: edit user info by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/get-all-users:
    get:
      tags:
      - admin
      - user
      summary: get all users
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataShortArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/get-all-orders:
    get:
      tags:
      - admin
      - order
      summary: get all orders
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfoShortArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /upload:
    post:
      tags:
      - upload
      summary: upload image
      requestBody:
        description: image
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_body'
      responses:
        "200":
          description: url
          content:
            string:
              schema:
                type: string
                x-content-type: string
              example: https://i.imgur.com/3i3tyXJ.gif
        "400":
          description: bad request
        "500":
          description: Unexpected error
components:
  schemas:
    StoreInfo:
      required:
      - address
      - description
      - name
      - picture
      - rate
      - rate_count
      - shipping_fee
      - status
      - store_id
      type: object
      properties:
        store_id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: good pasta
        name:
          type: string
          example: i'm pasta
        address:
          type: string
          example: pun street
        rate:
          type: number
          format: float
          example: 5
        rate_count:
          type: integer
          format: int64
          example: 10
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        status:
          type: integer
          format: int64
          example: 1
        shipping_fee:
          type: integer
          format: int64
          example: 100
      example:
        store_id: 1
        shipping_fee: 100
        address: pun street
        rate_count: 10
        rate: 5
        name: i'm pasta
        description: good pasta
        picture: https://i.imgur.com/1.jpg
        status: 1
    StoreArray:
      type: array
      items:
        $ref: '#/components/schemas/StoreInfo'
      x-schema-name: StoreArray
    ProductInfo:
      required:
      - description
      - name
      - picture
      - price
      - product_id
      - status
      - stock
      - store_id
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: pasta
        store_id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: tasty pasta
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        price:
          type: integer
          format: int64
          example: 9999
        stock:
          type: integer
          format: int64
          example: 100
        status:
          type: integer
          format: int64
          example: 1
      example:
        store_id: 1
        price: 9999
        product_id: 1
        name: pasta
        description: tasty pasta
        stock: 100
        picture: https://i.imgur.com/1.jpg
        status: 1
    ProductArray:
      type: array
      items:
        $ref: '#/components/schemas/ProductInfo'
      x-schema-name: ProductArray
    ProductInfoWithLabelAndDiscount:
      required:
      - description
      - event_discount_array
      - name
      - picture
      - price
      - product_id
      - product_label_array
      - status
      - stock
      - store_id
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: pasta
        store_id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: tasty pasta
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        price:
          type: integer
          format: int64
          example: 9999
        stock:
          type: integer
          format: int64
          example: 100
        status:
          type: integer
          format: int64
          example: 1
        product_label_array:
          type: array
          items:
            $ref: '#/components/schemas/ProductLabelInfo'
        event_discount_array:
          type: array
          items:
            $ref: '#/components/schemas/EventDiscount'
      example:
        store_id: 1
        product_label_array:
        - item_array:
          - name: have
          - name: false
          product_id: 1
          label_name: milk
          required: true
        - item_array:
          - name: have
          - name: false
          product_id: 1
          label_name: milk22
          required: true
        price: 9999
        product_id: 1
        name: pasta
        description: tasty pasta
        stock: 100
        event_discount_array:
        - discount_max_quantity: 2
          product_id: 1
          discount_name: new year discount
          discount_description: black tea get two for one free
          discount_id: 1
          status: 1
        - discount_max_quantity: 2
          product_id: 1
          discount_name: new year discount
          discount_description: black tea get two for one free
          discount_id: 1
          status: 1
        picture: https://i.imgur.com/1.jpg
        status: 1
    ProductInfoWithLabelAndDiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/ProductInfoWithLabelAndDiscount'
      x-schema-name: ProductInfoWithLabelAndDiscountArray
    CartInfo:
      required:
      - cart_id
      - customer_id
      - discount_id
      - product_id
      - product_quantity
      - store_id
      type: object
      properties:
        product_quantity:
          type: integer
          format: int64
          example: 10
        customer_id:
          type: integer
          format: int64
          example: 1
        product_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        discount_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
      example:
        cart_id: 1
        product_id: 1
        customer_id: 1
        product_quantity: 10
        discount_id: 1
        store_id: 1
    CartArray:
      type: array
      items:
        $ref: '#/components/schemas/CartInfo'
      x-schema-name: CartArray
    Cart2DArray:
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/CartArray'
      x-schema-name: Cart2DArray
    DiscountInfo:
      required:
      - discount_id
      - discount_type
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_type:
          type: integer
          format: int64
          example: 1
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_type: 1
        discount_id: 1
        status: 1
    DiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/DiscountInfo'
      x-schema-name: DiscountArray
    UserDataShort:
      required:
      - authority
      - status
      - user_email
      - user_id
      - user_name
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        user_name:
          type: string
          example: pasta
        user_email:
          type: string
          example: t110595959@rice.org.tw
        authority:
          type: string
          example: customer
        status:
          type: integer
          format: int64
          example: 1
      example:
        user_email: t110595959@rice.org.tw
        user_id: 1
        user_name: pasta
        authority: customer
        status: 1
    UserDataShortArray:
      type: array
      items:
        $ref: '#/components/schemas/UserDataShort'
      x-schema-name: UserDataShortArray
    UserData:
      required:
      - address
      - authority
      - birthday
      - cart_id
      - password
      - phone
      - status
      - user_email
      - user_id
      - user_name
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        user_name:
          type: string
          example: pasta
        user_email:
          type: string
          example: t110595959@rice.org.tw
        authority:
          type: string
          example: customer
        password:
          type: string
          example: "123456"
        address:
          type: string
          example: pun street
        phone:
          type: string
          example: "0912345678"
        status:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        birthday:
          type: string
          example: 2021-05-01
      example:
        birthday: 2021-05-01
        cart_id: 1
        user_email: t110595959@rice.org.tw
        password: "123456"
        address: pun street
        user_id: 1
        phone: "0912345678"
        user_name: pasta
        authority: customer
        status: 1
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/UserData'
      x-schema-name: UserArray
    Category:
      type: object
      properties:
        category_id:
          type: integer
          format: int64
          example: 1
        category_name:
          type: string
          example: drink
      example:
        category_name: drink
        category_id: 1
    CategoryArray:
      type: array
      items:
        $ref: '#/components/schemas/Category'
      x-schema-name: CategoryArray
    SeasoningDiscount:
      required:
      - discount_description
      - discount_end_date
      - discount_id
      - discount_name
      - discount_percentage
      - discount_start_date
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_name:
          type: string
          example: spring discount
        discount_description:
          type: string
          example: all products get 30% off
        discount_start_date:
          type: string
          example: 2021-01-01 00:00:00
        discount_end_date:
          type: string
          example: 2021-01-01 00:00:00
        discount_percentage:
          type: integer
          format: int64
          example: 70
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_start_date: 2021-01-01 00:00:00
        discount_name: spring discount
        discount_end_date: 2021-01-01 00:00:00
        discount_description: all products get 30% off
        discount_percentage: 70
        discount_id: 1
        status: 1
    SeasoningDiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/SeasoningDiscount'
      x-schema-name: SeasoningDiscountArray
    ShippingDiscount:
      required:
      - discount_description
      - discount_id
      - discount_max_price
      - discount_name
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_name:
          type: string
          example: free shipping
        discount_description:
          type: string
          example: free shipping when total price over 1000
        discount_max_price:
          type: integer
          format: int64
          example: 1000
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_name: free shipping
        discount_description: free shipping when total price over 1000
        discount_max_price: 1000
        discount_id: 1
        status: 1
    ShippingDiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/ShippingDiscount'
      x-schema-name: ShippingDiscountArray
    EventDiscount:
      required:
      - discount_description
      - discount_id
      - discount_max_quantity
      - discount_name
      - product_id
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_name:
          type: string
          example: new year discount
        discount_description:
          type: string
          example: black tea get two for one free
        discount_max_quantity:
          type: integer
          format: int64
          example: 2
        product_id:
          type: integer
          format: int64
          example: 1
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_max_quantity: 2
        product_id: 1
        discount_name: new year discount
        discount_description: black tea get two for one free
        discount_id: 1
        status: 1
    EventDiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/EventDiscount'
      x-schema-name: EventDiscountArray
    OrderInfo:
      required:
      - cart_array
      - cart_id
      - customer_id
      - order_date
      - order_status
      - seasoning_discount_id
      - shipping_discount_id
      - store_id
      - taking_address
      - taking_method
      - total_price
      type: object
      properties:
        customer_id:
          type: integer
          format: int64
          example: 1
        seasoning_discount_id:
          type: integer
          format: int64
          example: 1
        shipping_discount_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
        order_status:
          type: integer
          format: int64
          example: 1
        order_date:
          type: string
          example: 2021-01-01 00:00:00
        taking_address:
          type: string
          example: NTUT
        taking_method:
          type: integer
          format: int64
          example: 1
        total_price:
          type: integer
          format: int64
          example: 9999
        cart_array:
          type: array
          items:
            $ref: '#/components/schemas/CartInfo'
    HistoryInfo:
      required:
      - cart_id
      - customer_id
      - order_date
      - rate
      - status
      - store_id
      - store_name
      - store_picture
      - store_rate
      - total_price
      type: object
      properties:
        customer_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
        order_date:
          type: string
          example: 2021-01-01 00:00:00
        total_price:
          type: integer
          format: int64
          example: 9999
        store_name:
          type: string
          example: IM pasta
        store_rate:
          type: number
          format: float
          example: 3.0
        store_picture:
          type: string
          example: https://i.imgur.com/1.jpg
        status:
          type: integer
          format: int64
          example: 1
        rate:
          type: integer
          format: int64
          example: 1
      example:
        store_id: 1
        cart_id: 1
        order_date: 2021-01-01 00:00:00
        total_price: 9999
        store_picture: https://i.imgur.com/1.jpg
        store_name: IM pasta
        customer_id: 1
        store_rate: 3.0
        status: 1
        rate: 1
    HistoryArray:
      type: array
      items:
        $ref: '#/components/schemas/HistoryInfo'
      x-schema-name: HistoryArray
    OrderArray:
      type: array
      items:
        $ref: '#/components/schemas/OrderInfo'
      x-schema-name: OrderArray
    ProductStatistic:
      required:
      - product_id
      - product_name
      - product_quantity
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        product_name:
          type: string
          example: pasta
        product_quantity:
          type: integer
          format: int64
          example: 10
      example:
        product_id: 1
        product_name: pasta
        product_quantity: 10
    ProductStatisticArray:
      type: array
      items:
        $ref: '#/components/schemas/ProductStatistic'
      x-schema-name: ProductStatisticArray
    StoreStatistic:
      type: array
      items:
        $ref: '#/components/schemas/price'
      x-schema-name: StoreStatistic
    price:
      required:
      - price
      type: object
      properties:
        price:
          type: integer
          format: int64
          example: 10000
      example:
        price: 10000
    TimePeriod:
      required:
      - end_date
      - start_date
      type: object
      properties:
        start_date:
          type: string
          example: 2021-01-01 00:00:00
        end_date:
          type: string
          example: 2021-01-01 00:00:00
    RateInfo:
      required:
      - rate
      type: object
      properties:
        rate:
          type: number
          format: float
          example: 5
    status:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 1
    store_storeID_body:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 1
    product_productID_body:
      type: object
      properties:
        product_quantity:
          type: integer
          format: int64
          example: 10
    discountID_updatestatus_body:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 1
    inline_response_200:
      required:
      - price
      - seasoning_discount_bool
      - shipping_discount_bool
      type: object
      properties:
        price:
          type: integer
          format: int64
          example: 9999
        shipping_discount_bool:
          type: boolean
          example: true
        seasoning_discount_bool:
          type: boolean
          example: true
      example:
        price: 9999
        shipping_discount_bool: true
        seasoning_discount_bool: true
    CartOrderInfo:
      required:
      - real_total_price
      - store_order_info_array
      type: object
      properties:
        real_total_price:
          type: integer
          format: int64
          example: 3333
        store_order_info_array:
          type: array
          items:
            $ref: '#/components/schemas/StoreOrderInfo'
          x-schema-name: CartOrderInfo
      example:
        real_total_price: 3333
        store_order_info_array:
        - store_id: 1
          store_name: i'm pasta
          store_shipping_fee: 100
          product_order:
          - event_discount_max_quantity: 10
            event_discount_id: 1
            product_id: 1
            product_price: 9999
            product_name: pasta
            product_quantity: 10
            product_picture: https://i.imgur.com/1.jpg
          - event_discount_max_quantity: 10
            event_discount_id: 1
            product_id: 1
            product_price: 9999
            product_name: pasta
            product_quantity: 10
            product_picture: https://i.imgur.com/1.jpg
          shipping_discount:
            discount_name: free shipping
            discount_description: free shipping when total price over 1000
            discount_max_price: 1000
            discount_id: 1
            status: 1
          shipping_discount_bool: true
          seasoning_discount:
            discount_start_date: 2021-01-01 00:00:00
            discount_name: spring discount
            discount_end_date: 2021-01-01 00:00:00
            discount_description: all products get 30% off
            discount_percentage: 70
            discount_id: 1
            status: 1
          seasoning_discount_bool: true
          total_price: 1000
        - store_id: 1
          store_name: i'm pasta
          store_shipping_fee: 100
          product_order:
          - event_discount_max_quantity: 10
            event_discount_id: 1
            product_id: 1
            product_price: 9999
            product_name: pasta
            product_quantity: 10
          - event_discount_max_quantity: 10
            event_discount_id: 1
            product_id: 1
            product_price: 9999
            product_name: pasta
            product_quantity: 10
          shipping_discount:
            discount_name: free shipping
            discount_description: free shipping when total price over 1000
            discount_max_price: 1000
            discount_id: 1
            status: 1
          shipping_discount_bool: true
          seasoning_discount:
            discount_start_date: 2021-01-01 00:00:00
            discount_name: spring discount
            discount_end_date: 2021-01-01 00:00:00
            discount_description: all products get 30% off
            discount_percentage: 70
            discount_id: 1
            status: 1
          seasoning_discount_bool: true
          total_price: 1000
    HistoryDetailStoreOrderInfo:
      type: object
      properties:
        store_id:
          type: integer
          format: int64
          example: 1
        store_name:
          type: string
          example: i'm pasta
        store_shipping_fee:
          type: integer
          format: int64
          example: 100
        shipping_discount_id:
          type: integer
          format: int64
          example: 1
        shipping_discount_max_price:
          type: integer
          format: int64
          example: 100
        seasoning_discount_id:
          type: integer
          format: int64
          example: 1
        seasoning_discount_start_date:
          type: string
          example: 2021-01-01 00:00:00
        seasoning_discount_end_date:
          type: string
          example: 2021-01-01 00:00:00
        seasoning_discount_percentage:
          type: integer
          format: int64
          example: 80
        product_order:
          type: array
          items:
            $ref: '#/components/schemas/ProductOrderInfo'
          x-schema-name: ProductOrderInfo
    StoreOrderInfo:
      required:
      - product_order
      - seasoning_discount
      - seasoning_discount_bool
      - shipping_discount
      - shipping_discount_bool
      - store_id
      - store_name
      - store_shipping_fee
      - total_price
      type: object
      properties:
        store_id:
          type: integer
          format: int64
          example: 1
        store_name:
          type: string
          example: i'm pasta
        store_shipping_fee:
          type: integer
          format: int64
          example: 100
        product_order:
          type: array
          items:
            $ref: '#/components/schemas/ProductOrderInfo'
          x-schema-name: ProductOrderInfo
        shipping_discount:
          $ref: '#/components/schemas/ShippingDiscount'
        shipping_discount_bool:
          type: boolean
          example: true
        seasoning_discount:
          $ref: '#/components/schemas/SeasoningDiscount'
        seasoning_discount_bool:
          type: boolean
          example: true
        total_price:
          type: integer
          format: int64
          example: 1000
      example:
        store_id: 1
        store_name: i'm pasta
        store_shipping_fee: 100
        product_order:
        - event_discount_max_quantity: 10
          event_discount_id: 1
          product_id: 1
          product_price: 9999
          product_name: pasta
          product_quantity: 10
          product_picture: https://i.imgur.com/1.jpg
        - event_discount_max_quantity: 10
          event_discount_id: 1
          product_id: 1
          product_price: 9999
          product_name: pasta
          product_quantity: 10
          product_picture: https://i.imgur.com/1.jpg
        shipping_discount:
          discount_name: free shipping
          discount_description: free shipping when total price over 1000
          discount_max_price: 1000
          discount_id: 1
          status: 1
        shipping_discount_bool: true
        seasoning_discount:
          discount_start_date: 2021-01-01 00:00:00
          discount_name: spring discount
          discount_end_date: 2021-01-01 00:00:00
          discount_description: all products get 30% off
          discount_percentage: 70
          discount_id: 1
          status: 1
        seasoning_discount_bool: true
        total_price: 1000
    ProductOrderInfo:
      required:
      - event_discount_id
      - event_discount_max_quantity
      - product_id
      - product_name
      - product_picture
      - product_price
      - product_quantity
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        product_name:
          type: string
          example: pasta
        product_price:
          type: integer
          format: int64
          example: 9999
        product_quantity:
          type: integer
          format: int64
          example: 10
        product_picture:
          type: string
          example: https://i.imgur.com/1.jpg
        event_discount_id:
          type: integer
          format: int64
          example: 1
        event_discount_max_quantity:
          type: integer
          example: 10
      example:
        event_discount_max_quantity: 10
        event_discount_id: 1
        product_id: 1
        product_price: 9999
        product_name: pasta
        product_quantity: 10
        product_picture: https://i.imgur.com/1.jpg
    OrderInfoShortArray:
      type: array
      items:
        $ref: '#/components/schemas/OrderInfoShort'
      x-schema-name: OrderInfoShortArray
    OrderInfoShort:
      required:
      - cart_id
      - order_date
      - store_id
      - user_id
      - user_name
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
        order_date:
          type: string
          example: 2021-01-01 00:00:00
        user_name:
          type: string
          example: user1
      example:
        store_id: 1
        cart_id: 1
        order_date: 2021-01-01 00:00:00
        user_id: 1
        user_name: user1
    ProductLabelItemInfo:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: have
      example:
        name: have
    ProductLabelInfo:
      required:
      - item_array
      - label_name
      - product_id
      - required
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        label_name:
          type: string
          example: milk
        required:
          type: boolean
          example: true
        item_array:
          type: array
          items:
            $ref: '#/components/schemas/ProductLabelItemInfo'
      example:
        item_array:
        - name: have
        - name: have
        product_id: 1
        label_name: milk
        required: true
    ProductLabelInfoArray:
      type: array
      items:
        $ref: '#/components/schemas/ProductLabelInfo'
    RunOrderInfo:
      required:
      - cart_id
      - status
      - store_id
      - store_name
      - store_picture
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
        status:
          type: integer
          format: int64
          example: 1
        store_name:
          type: string
          example: IM pasta
        store_picture:
          type: string
          example: https://i.imgur.com/1.jpg
      example:
        store_id: 1
        cart_id: 1
        user_id: 1
        store_picture: https://i.imgur.com/1.jpg
        store_name: IM pasta
        status: 1
    RunOrderInfoArray:
      type: array
      items:
        $ref: '#/components/schemas/RunOrderInfo'
      x-schema-name: RunOrderInfoArray
    StoreOrderStatusInfo:
      required:
      - cart_id
      - order_date
      - status
      - store_id
      - total_price
      - user_id
      - user_name
      type: object
      properties:
        user_name:
          type: string
          example: user1
        user_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
        order_date:
          type: string
          example: 2021-01-01 00:00:00
        total_price:
          type: integer
          format: int64
          example: 9999
        status:
          type: integer
          format: int64
          example: 1
      example:
        store_id: 1
        cart_id: 1
        order_date: 2021-01-01 00:00:00
        total_price: 9999
        user_id: 1
        status: 1
    StoreOrderStatusInfoArray:
      type: array
      items:
        $ref: '#/components/schemas/StoreOrderStatusInfo'
      x-schema-name: StoreOrderStatusInfoArray
    StoreInfoWithCategory:
      required:
      - address
      - category_array
      - description
      - name
      - picture
      - rate
      - rate_count
      - shipping_fee
      - status
      - store_id
      type: object
      properties:
        store_id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: good pasta
        name:
          type: string
          example: i'm pasta
        address:
          type: string
          example: pun street
        rate:
          type: number
          format: float
          example: 5
        rate_count:
          type: integer
          format: int64
          example: 10
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        status:
          type: integer
          format: int64
          example: 1
        shipping_fee:
          type: integer
          format: int64
          example: 100
        category_array:
          type: array
          items:
            $ref: '#/components/schemas/Category'
      example:
        store_id: 1
        shipping_fee: 100
        address: pun street
        rate_count: 10
        rate: 5
        category_array:
        - category_name: drink
          category_id: 1
        - category_name: drink
          category_id: 1
        name: i'm pasta
        description: good pasta
        picture: https://i.imgur.com/1.jpg
        status: 1
    StoreInfoWithCategoryArray:
      type: array
      items:
        $ref: '#/components/schemas/StoreInfoWithCategory'
      x-schema-name: StoreInfoWithCategoryArray
    LoginInfo:
      required:
      - password
      - user_email
      properties:
        user_email:
          type: string
          example: a@gmail.com
        password:
          type: string
          example: pwd1
    RegisterInfo:
      required:
      - StoreRegisterInfo
      - address
      - birthday
      - password
      - phone
      - user_email
      - user_name
      properties:
        user_name:
          type: string
          example: artist
        user_email:
          type: string
          example: artist@gmail.com
        password:
          type: string
          example: pwd1
        phone:
          type: string
          example: "0912345678"
        address:
          type: string
          example: NTUT
        birthday:
          type: string
          example: 2021-01-01
        StoreRegisterInfo:
          $ref: '#/components/schemas/StoreRegisterInfo'
    StoreRegisterInfo:
      required:
      - address
      - description
      - name
      - picture
      - shipping_fee
      properties:
        name:
          type: string
          example: pick-up store
        description:
          type: string
          example: good pick-up
        address:
          type: string
          example: pun street
        shipping_fee:
          type: integer
          format: int64
          example: 100
        picture:
          type: string
          example: https://i.imgur.com/3i3tyXJ.gif
    EmailInfo:
      required:
      - user_email
      properties:
        user_email:
          type: string
          example: a@gmail.com
    upload_body:
      type: object
      properties:
        file:
          type: string
          format: binary
    IdInfo:
      required:
      - user_id
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
      example:
        user_id: 1
    TokenInfo:
      required:
      - token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFAZ21haWwuY29tIiwiaWQiOjIsImF1dGhvcml0eSI6InN0b3JlIiwiZXhwIjoxNzAzMjA2ODcwLCJpYXQiOjE3MDMxMjA0NzB9.G64JkqpwZmf-qPYa9WozPeJmzu3aCsn7REh-E2SDgCAtPGZC_7u372y1NyXANSGoIA822GbFwUQNLjaP2ofMqg
      example:
        token: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFAZ21haWwuY29tIiwiaWQiOjIsImF1dGhvcml0eSI6InN0b3JlIiwiZXhwIjoxNzAzMjA2ODcwLCJpYXQiOjE3MDMxMjA0NzB9.G64JkqpwZmf-qPYa9WozPeJmzu3aCsn7REh-E2SDgCAtPGZC_7u372y1NyXANSGoIA822GbFwUQNLjaP2ofMqg
    OneStoreListInfo:
      required:
      - category_array
      - name
      - picture
      - rate
      - store_id
      type: object
      properties:
        store_id:
          type: number
          example: 1
        name:
          type: string
          example: i'm pasta
        rate:
          type: number
          format: float
          example: 5
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        category_array:
          type: array
          items:
            $ref: '#/components/schemas/Category'
      example:
        store_id: 1
        rate: 5
        category_array:
        - category_name: drink
          category_id: 1
        - category_name: drink
          category_id: 1
        name: i'm pasta
        picture: https://i.imgur.com/1.jpg
    OneStoreListInfoArray:
      type: array
      items:
        $ref: '#/components/schemas/OneStoreListInfo'
      x-schema-name: OneStoreListInfoArray
    searchInfo:
      required:
      - category_array
      - price_high
      - price_low
      - search_string
      type: object
      properties:
        category_array:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        search_string:
          type: string
          example: pasta
        price_high:
          type: number
          format: float
          example: 1000
        price_low:
          type: number
          format: float
          example: 0
      example:
        category_array:
        - category_name: Spices
          category_id: 1
        - category_name: Sustainable
          category_id: 2
        price_high: 1000
        price_low: 0
        search_string: pasta
    RecommendInfo:
      required:
      - picture
      - product_id
      - product_name
      - store_id
      type: object
      properties:
        store_id:
          type: number
          example: 1
        product_id:
          type: number
          example: 1
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        product_name:
          type: string
          example: pasta
      example:
        store_id: 1
        product_id: 1
        picture: https://i.imgur.com/1.jpg
        product_name: pasta
    RecommendInfoArray:
      type: array
      items:
        $ref: '#/components/schemas/RecommendInfo'
      x-schema-name: RecommendInfoArray
