openapi: 3.0.3
info:
  title: PUN street Universal Access - OpenAPI 3.0
  description: pua
  version: v1
servers:
- url: http://localhost:5000/api/v1
paths:
  /store/{storeID}:
    get:
      tags:
      - customer
      - store
      summary: return a store by ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: A Store object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInfo'
        "500":
          description: Unexpected error
  /stores:
    get:
      tags:
      - customer
      - store
      summary: get all store
      responses:
        "200":
          description: return store array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreArray'
        "500":
          description: Unexpected error
  /store/{storeID}/get-statictics:
    post:
      tags:
      - seller
      - store
      - statistics
      summary: get store statistics in period
      parameters:
      - name: storeID
        in: path
        description: The ID of the store.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: time period
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimePeriod'
      responses:
        "200":
          description: return store statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreStatistic'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/get-best-selling:
    get:
      tags:
      - seller
      - store
      - statistics
      summary: get best selling product
      parameters:
      - name: storeID
        in: path
        description: The ID of the store.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return best selling product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductStatistic'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/carts:
    get:
      tags:
      - customer
      - cart
      summary: get carts by userID and cartID
      parameters:
      - name: userID
        in: path
        description: The ID of the user.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return carts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/add-product:
    post:
      tags:
      - seller
      - store
      - product
      summary: add a product in store.
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfo'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/rate:
    post:
      tags:
      - customer
      - store
      summary: rate a store
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to rate.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: rate info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateInfo'
      responses:
        "200":
          description: rate success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seller/{userID}/create-store:
    post:
      tags:
      - seller
      - store
      summary: create new store
      parameters:
      - name: userID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: store info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInfo'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/add-category/{categoryID}:
    post:
      tags:
      - seller
      - store
      - category
      summary: add a category to store
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to add
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: categoryID
        in: path
        description: The ID of the category to add
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/remove-category/{categoryID}:
    delete:
      tags:
      - seller
      - store
      - category
      summary: remove a category from store
      parameters:
      - name: categoryID
        in: path
        description: The ID of the category to remove
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store to remove
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /categorys:
    get:
      tags:
      - seller
      - category
      summary: get all category
      responses:
        "200":
          description: return category array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryArray'
        "500":
          description: Unexpected error
  /seller/update-order-status/customer/{userID}/cart/{cartID}/store/{storeID}:
    put:
      tags:
      - seller
      - order
      summary: update order status
      parameters:
      - name: userID
        in: path
        description: The ID of the user to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: order status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store_storeID_body'
      responses:
        "200":
          description: update success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/update-product/{productID}:
    put:
      tags:
      - seller
      - product
      summary: update a product by ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: productID
        in: path
        description: The ID of the product to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: product info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfo'
      responses:
        "200":
          description: update success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /product/{productID}/recommand:
    get:
      tags:
      - customer
      - product
      summary: get 'who bought this also bought'
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return product array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductArray'
        "500":
          description: Unexpected error
  /product/{productID}:
    get:
      tags:
      - customer
      - product
      summary: return a product by ID
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: A product object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfo'
        "500":
          description: Unexpected error
    delete:
      tags:
      - seller
      - product
      summary: deactive a product by ID
      parameters:
      - name: productID
        in: path
        description: The ID of the product should be deleted.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: delete success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /product/{productID}/discounts:
    get:
      tags:
      - customer
      - discount
      - product
      summary: get event discounts by product ID
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return discount array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDiscountArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/products:
    get:
      tags:
      - customer
      - product
      summary: get all products by store ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return product array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart:
    post:
      tags:
      - customer
      - cart
      summary: add product to cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: add a new cart.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInfo'
        required: true
      responses:
        "200":
          description: A cart object.
        "418":
          description: The inventory is not enough for the supply.
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/delete/product/{productID}:
    delete:
      tags:
      - customer
      - cart
      summary: remove product from cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: delete success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/update/product/{productID}:
    put:
      tags:
      - customer
      - cart
      summary: update product quantity in cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: product quantity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_productID_body'
      responses:
        "200":
          description: update success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/store/{storeID}/cart/{cartID}/cancel:
    put:
      tags:
      - customer
      - order
      summary: cancel order
      parameters:
      - name: userID
        in: path
        description: The ID of the user.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: cancel success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /user/get-info/{userID}:
    get:
      tags:
      - user
      summary: get user info by ID
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/discounts:
    get:
      tags:
      - customer
      - discount
      summary: get shipping discounts by store ID
      parameters:
      - name: storeID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDiscountArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seasoning-discount:
    post:
      tags:
      - seller
      - discount
      summary: create a seasoning discount
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeasoningDiscount'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/shipping-discount:
    post:
      tags:
      - seller
      - discount
      summary: create a shipping discount
      parameters:
      - name: storeID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingDiscount'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /product/{productID}/event-discount:
    post:
      tags:
      - seller
      - discount
      summary: create a event discount
      parameters:
      - name: productID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDiscount'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seasoning-discounts:
    get:
      tags:
      - customer
      - discount
      summary: get all seasoning discounts
      responses:
        "200":
          description: return seasoning discount array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasoningDiscountArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /discount/{discountID}/update-status:
    put:
      tags:
      - seller
      - discount
      summary: update discount status
      parameters:
      - name: discountID
        in: path
        description: The ID of the discount to update.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: discount status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discountID_updatestatus_body'
      responses:
        "200":
          description: update success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/store/{storeID}/checkout:
    post:
      tags:
      - customer
      - cart
      - order
      summary: checkout cart (optional-> email to customer)
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: checkout info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutInfo'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/store/{storeID}/get-total-price:
    get:
      tags:
      - customer
      - cart
      - discount
      summary: get total price of cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/store/{storeID}/add-discount/{discountID}:
    post:
      tags:
      - customer
      - cart
      - discount
      summary: add discount to cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: storeID
        in: path
        description: The ID of the store .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: discountID
        in: path
        description: The ID of the discount .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: add success
        "500":
          description: Unexpected error
  /customer/{userID}/orders:
    get:
      tags:
      - customer
      - order
      summary: get all orders by user ID
      parameters:
      - name: userID
        in: path
        description: The ID of the user .
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/ban-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: ban a user by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/unban-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: unban a user by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/edit-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: edit user info by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/get-all-users:
    get:
      tags:
      - admin
      - user
      summary: get all users
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/get-all-orders:
    get:
      tags:
      - admin
      - order
      summary: get all orders
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart2DArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
components:
  schemas:
    StoreInfo:
      required:
      - address
      - description
      - name
      - picture
      - rate
      - rate_count
      - shipping_fee
      - status
      - store_id
      type: object
      properties:
        store_id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: good pasta
        name:
          type: string
          example: i'm pasta
        address:
          type: string
          example: pun street
        rate:
          type: number
          format: float
          example: 5
        rate_count:
          type: integer
          format: int64
          example: 10
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        status:
          type: integer
          format: int64
          example: 1
        shipping_fee:
          type: integer
          format: int64
          example: 100
      example:
        store_id: 1
        shipping_fee: 100
        address: pun street
        rate_count: 10
        rate: 5
        name: i'm pasta
        description: good pasta
        picture: https://i.imgur.com/1.jpg
        status: 1
    StoreArray:
      type: array
      items:
        $ref: '#/components/schemas/StoreInfo'
      x-schema-name: StoreArray
    ProductInfo:
      required:
      - description
      - name
      - picture
      - price
      - product_id
      - status
      - stock
      - store_id
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: pasta
        store_id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: tasty pasta
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        price:
          type: integer
          format: int64
          example: 9999
        stock:
          type: integer
          format: int64
          example: 100
        status:
          type: integer
          format: int64
          example: 1
      example:
        store_id: 1
        price: 9999
        product_id: 1
        name: pasta
        description: tasty pasta
        stock: 100
        picture: https://i.imgur.com/1.jpg
        status: 1
    ProductArray:
      type: array
      items:
        $ref: '#/components/schemas/ProductInfo'
      x-schema-name: ProductArray
    CartInfo:
      required:
      - cart_id
      - customer_id
      - discount_id
      - product_id
      - product_quantity
      - store_id
      type: object
      properties:
        product_quantity:
          type: integer
          format: int64
          example: 10
        customer_id:
          type: integer
          format: int64
          example: 1
        product_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        discount_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
      example:
        cart_id: 1
        product_id: 1
        customer_id: 1
        product_quantity: 10
        discount_id: 1
        store_id: 1
    CartArray:
      type: array
      items:
        $ref: '#/components/schemas/CartInfo'
      x-schema-name: CartArray
    Cart2DArray:
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/CartArray'
      x-schema-name: Cart2DArray
    DiscountInfo:
      required:
      - discount_id
      - discount_type
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_type:
          type: integer
          format: int64
          example: 1
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_type: 1
        discount_id: 1
        status: 1
    DiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/DiscountInfo'
      x-schema-name: DiscountArray
    UserData:
      required:
      - address
      - authority
      - birthday
      - cart_id
      - password
      - phone
      - status
      - user_email
      - user_id
      - user_name
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        user_name:
          type: string
          example: pasta
        user_email:
          type: string
          example: t110595959@rice.org.tw
        authority:
          type: integer
          format: int64
          example: 100
        password:
          type: string
          example: "123456"
        address:
          type: string
          example: pun street
        phone:
          type: string
          example: "0912345678"
        status:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        birthday:
          type: string
          example: 2021-05-01
      example:
        birthday: 2021-05-01
        cart_id: 1
        user_email: t110595959@rice.org.tw
        password: "123456"
        address: pun street
        user_id: 1
        phone: "0912345678"
        user_name: pasta
        authority: 100
        status: 1
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/UserData'
      x-schema-name: UserArray
    Category:
      type: object
      properties:
        category_id:
          type: integer
          format: int64
          example: 1
        category_name:
          type: string
          example: drink
      example:
        category_name: drink
        category_id: 1
    CategoryArray:
      type: array
      items:
        $ref: '#/components/schemas/Category'
      x-schema-name: CategoryArray
    SeasoningDiscount:
      required:
      - discount_description
      - discount_end_date
      - discount_id
      - discount_name
      - discount_percentage
      - discount_start_date
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_name:
          type: string
          example: spring discount
        discount_description:
          type: string
          example: all products get 30% off
        discount_start_date:
          type: string
          example: 2021-01-01 00:00:00
        discount_end_date:
          type: string
          example: 2021-01-01 00:00:00
        discount_percentage:
          type: integer
          format: int64
          example: 70
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_start_date: 2021-01-01 00:00:00
        discount_name: spring discount
        discount_end_date: 2021-01-01 00:00:00
        discount_description: all products get 30% off
        discount_percentage: 70
        discount_id: 1
        status: 1
    SeasoningDiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/SeasoningDiscount'
      x-schema-name: SeasoningDiscountArray
    ShippingDiscount:
      required:
      - discount_description
      - discount_id
      - discount_max_price
      - discount_name
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_name:
          type: string
          example: free shipping
        discount_description:
          type: string
          example: free shipping when total price over 1000
        discount_max_price:
          type: integer
          format: int64
          example: 1000
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_name: free shipping
        discount_description: free shipping when total price over 1000
        discount_max_price: 1000
        discount_id: 1
        status: 1
    ShippingDiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/ShippingDiscount'
      x-schema-name: ShippingDiscountArray
    EventDiscount:
      required:
      - discount_description
      - discount_id
      - discount_max_quantity
      - discount_name
      - product_id
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_name:
          type: string
          example: new year discount
        discount_description:
          type: string
          example: black tea get two for one free
        discount_max_quantity:
          type: integer
          format: int64
          example: 2
        product_id:
          type: integer
          format: int64
          example: 1
        status:
          type: integer
          format: int64
          example: 1
      example:
        discount_max_quantity: 2
        product_id: 1
        discount_name: new year discount
        discount_description: black tea get two for one free
        discount_id: 1
        status: 1
    EventDiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/EventDiscount'
      x-schema-name: EventDiscountArray
    OrderInfo:
      required:
      - cart_array
      - cart_id
      - customer_id
      - order_date
      - order_status
      - seasoning_discount_id
      - shipping_discount_id
      - store_id
      - taking_address
      - taking_method
      - total_price
      type: object
      properties:
        customer_id:
          type: integer
          format: int64
          example: 1
        seasoning_discount_id:
          type: integer
          format: int64
          example: 1
        shipping_discount_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        store_id:
          type: integer
          format: int64
          example: 1
        order_status:
          type: integer
          format: int64
          example: 1
        order_date:
          type: string
          example: 2021-01-01 00:00:00
        taking_address:
          type: string
          example: NTUT
        taking_method:
          type: integer
          format: int64
          example: 1
        total_price:
          type: integer
          format: int64
          example: 9999
        cart_array:
          type: array
          items:
            $ref: '#/components/schemas/CartInfo'
      example:
        shipping_discount_id: 1
        store_id: 1
        cart_id: 1
        order_status: 1
        order_date: 2021-01-01 00:00:00
        total_price: 9999
        taking_method: 1
        seasoning_discount_id: 1
        taking_address: NTUT
        customer_id: 1
        cart_array:
        - cart_id: 1
          product_id: 1
          customer_id: 1
          product_quantity: 10
          discount_id: 1
          store_id: 1
        - cart_id: 1
          product_id: 1
          customer_id: 1
          product_quantity: 10
          discount_id: 1
          store_id: 1
    OrderArray:
      type: array
      items:
        $ref: '#/components/schemas/OrderInfo'
      x-schema-name: OrderArray
    ProductStatistic:
      required:
      - product_id
      - product_name
      - product_quantity
      - total_price
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        product_name:
          type: string
          example: pasta
        product_quantity:
          type: integer
          format: int64
          example: 10
        total_price:
          type: integer
          format: int64
          example: 9999
      example:
        total_price: 9999
        product_id: 1
        product_name: pasta
        product_quantity: 10
    StoreStatistic:
      type: array
      items:
        $ref: '#/components/schemas/ProductStatistic'
      x-schema-name: StoreStatistic
    TimePeriod:
      required:
      - end_date
      - start_date
      type: object
      properties:
        start_date:
          type: string
          example: 2021-01-01 00:00:00
        end_date:
          type: string
          example: 2021-01-01 00:00:00
    RateInfo:
      required:
      - rate
      type: object
      properties:
        rate:
          type: number
          format: float
          example: 5
    CheckoutInfo:
      required:
      - seasoning_discount_id
      - shipping_discount_id
      - taking_method
      type: object
      properties:
        seasoning_discount_id:
          type: integer
          format: int64
          example: 1
        shipping_discount_id:
          type: integer
          format: int64
          example: 1
        taking_method:
          type: integer
          format: int64
          example: 1
    store_storeID_body:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 1
    product_productID_body:
      type: object
      properties:
        product_quantity:
          type: integer
          format: int64
          example: 10
    discountID_updatestatus_body:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 1
    inline_response_200:
      type: object
      properties:
        price:
          type: integer
          format: int64
          example: 9999
      example:
        price: 9999
